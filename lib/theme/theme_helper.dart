import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.cyan20014,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              5,
            ),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Color(0XFFFFFFFF),
          shape: RoundedRectangleBorder(
            side: BorderSide(
              color: colorScheme.primary,
              width: 1,
            ),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium: TextStyle(
          color: colorScheme.onSecondaryContainer,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray700,
          fontSize: getFontSize(
            10,
          ),
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: getFontSize(
            36,
          ),
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: getFontSize(
            12,
          ),
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: getFontSize(
            10,
          ),
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w600,
        ),
        labelSmall: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: getFontSize(
            9,
          ),
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: getFontSize(
            20,
          ),
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onSecondaryContainer.withOpacity(1),
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray900,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0X99E1E6F0),
    primaryContainer: Color(0XFF004294),
    secondary: Color(0XFF004294),
    secondaryContainer: Color(0XFFEBC962),
    tertiary: Color(0XFF004294),
    tertiaryContainer: Color(0XFFEBC962),

    // Background colors
    background: Color(0XFF004294),

    // Surface colors
    surface: Color(0XFF004294),
    surfaceTint: Color(0X0C022E64),
    surfaceVariant: Color(0XFFEBC962),

    // Error colors
    error: Color(0X0C022E64),
    errorContainer: Color(0XFFE0AD0F),
    onError: Color(0X99E1E6F0),
    onErrorContainer: Color(0X90212121),

    // On colors(text colors)
    onBackground: Color(0XA2FFFFFF),
    onInverseSurface: Color(0X99E1E6F0),
    onPrimary: Color(0X0C022E64),
    onPrimaryContainer: Color(0XA2FFFFFF),
    onSecondary: Color(0XA2FFFFFF),
    onSecondaryContainer: Color(0X90212121),
    onTertiary: Color(0XA2FFFFFF),
    onTertiaryContainer: Color(0X90212121),

    // Other colors
    outline: Color(0X0C022E64),
    outlineVariant: Color(0XFF004294),
    scrim: Color(0XFF004294),
    shadow: Color(0X0C022E64),

    // Inverse colors
    inversePrimary: Color(0XFF004294),
    inverseSurface: Color(0X0C022E64),

    // Pending colors
    onSurface: Color(0XA2FFFFFF),
    onSurfaceVariant: Color(0X90212121),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue800 => Color(0XFF0E5CBD);
  Color get blue900 => Color(0XFF00408F);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray400 => Color(0XFF888888);

  // Cyan
  Color get cyan20014 => Color(0X1478C8E1);

  // Gray
  Color get gray100 => Color(0XFFF5F5F5);
  Color get gray700 => Color(0XFF616161);
  Color get gray900 => Color(0XFF001530);

  // Lime
  Color get lime50 => Color(0XFFFDF8EC);
  Color get lime900 => Color(0XFFA07701);

  // Yellow
  Color get yellow800 => Color(0XFFE6B014);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
